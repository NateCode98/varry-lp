"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dependenciesForTree = void 0;
/**
 * Returns the transitive dependencies for a certain chunk
 * @param chunk - the chunk to get the dependencies of
 * @param chunks - all chunks
 * @param [opts] - the options to use
 * @return the transitive dependencies for the given chunk
 */
function dependenciesForTree(chunk, allChunks, opts) {
    var result = new Set();
    var visited = new Set();
    dependenciesForTrees(result, visited, chunk, allChunks, false, opts);
    return result;
}
exports.dependenciesForTree = dependenciesForTree;
function addChunk(chunk, result, opts, dynamicImport) {
    if (!opts || !opts.filter || opts.filter({ chunk: chunk, dynamicImport: dynamicImport })) {
        result.add(chunk);
    }
}
function dependenciesForTrees(result, visited, chunkToResolve, allChunks, dynamicImport, opts) {
    if (opts && opts.walk && !opts.walk({ chunk: chunkToResolve, dynamicImport: dynamicImport })) {
        return;
    }
    visited.add(chunkToResolve);
    addChunk(chunkToResolve, result, opts, dynamicImport);
    chunkToResolve.imports.concat(chunkToResolve.dynamicImports).forEach(function (fileName) {
        var chunk = allChunks.find(function (c) { return c.fileName === fileName; });
        if (chunk && !visited.has(chunk)) { // avoid cycles
            var dynamicImport_1 = chunkToResolve.imports.indexOf(chunk.fileName) < 0;
            dependenciesForTrees(result, visited, chunk, allChunks, dynamicImport_1, opts);
        }
    });
}
