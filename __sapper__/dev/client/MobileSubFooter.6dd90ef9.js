import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, k as element, l as claim_element, o as attr_dev, p as add_location, g as insert_dev, b as detach_dev, r as text, u as children, w as claim_text, x as append_dev, y as set_data_dev, a as space, e as claim_space, z as toggle_class, n as noop, A as empty, B as set_style } from './client.888b8b96.js';

/* src/components/Quote.svelte generated by Svelte v3.24.1 */

const file = "src/components/Quote.svelte";

// (113:4) {#if leftAlign}
function create_if_block_2(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/logos/varry_wave_gradient.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1kwe4x2");
			add_location(img, file, 113, 8, 1895);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(113:4) {#if leftAlign}",
		ctx
	});

	return block;
}

// (120:8) {#if buttonBool === "true"}
function create_if_block_1(ctx) {
	let p;
	let a;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(/*buttonText*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, /*buttonText*/ ctx[4]);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*buttonLink*/ ctx[3]);
			attr_dev(a, "class", "button-primary svelte-1kwe4x2");
			add_location(a, file, 121, 12, 2158);
			attr_dev(p, "class", "lead button svelte-1kwe4x2");
			add_location(p, file, 120, 8, 2122);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*buttonText*/ 16) set_data_dev(t, /*buttonText*/ ctx[4]);

			if (dirty & /*buttonLink*/ 8) {
				attr_dev(a, "href", /*buttonLink*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(120:8) {#if buttonBool === \\\"true\\\"}",
		ctx
	});

	return block;
}

// (126:8) {#if threeBoxes === "true"}
function create_if_block(ctx) {
	let div3;
	let div0;
	let h10;
	let t0;
	let i0;
	let t1;
	let p0;
	let t2;
	let t3;
	let div1;
	let h11;
	let t4;
	let i1;
	let t5;
	let p1;
	let t6;
	let t7;
	let div2;
	let h12;
	let t8;
	let i2;
	let t9;
	let p2;
	let t10;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			h10 = element("h1");
			t0 = text("Workshops ");
			i0 = element("i");
			t1 = space();
			p0 = element("p");
			t2 = text("Lorem ipsum dolor sit amet consectetur adipisicing elitadipisicing elitadipisicing elit");
			t3 = space();
			div1 = element("div");
			h11 = element("h1");
			t4 = text("Input Sessions ");
			i1 = element("i");
			t5 = space();
			p1 = element("p");
			t6 = text("Lorem ipsum dolor sit amet consectetur adipisicing elitadipisicing elitadipisicing elit");
			t7 = space();
			div2 = element("div");
			h12 = element("h1");
			t8 = text("Mentorship ");
			i2 = element("i");
			t9 = space();
			p2 = element("p");
			t10 = text("Lorem ipsum dolor sit amet consectetur adipisicing elitadipisicing elitadipisicing elit");
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h10 = claim_element(div0_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t0 = claim_text(h10_nodes, "Workshops ");
			i0 = claim_element(h10_nodes, "I", { class: true });
			children(i0).forEach(detach_dev);
			h10_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Lorem ipsum dolor sit amet consectetur adipisicing elitadipisicing elitadipisicing elit");
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h11 = claim_element(div1_nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t4 = claim_text(h11_nodes, "Input Sessions ");
			i1 = claim_element(h11_nodes, "I", { class: true });
			children(i1).forEach(detach_dev);
			h11_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			p1 = claim_element(div1_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "Lorem ipsum dolor sit amet consectetur adipisicing elitadipisicing elitadipisicing elit");
			p1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h12 = claim_element(div2_nodes, "H1", { class: true });
			var h12_nodes = children(h12);
			t8 = claim_text(h12_nodes, "Mentorship ");
			i2 = claim_element(h12_nodes, "I", { class: true });
			children(i2).forEach(detach_dev);
			h12_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			p2 = claim_element(div2_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t10 = claim_text(p2_nodes, "Lorem ipsum dolor sit amet consectetur adipisicing elitadipisicing elitadipisicing elit");
			p2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i0, "class", "fas fa-briefcase svelte-1kwe4x2");
			add_location(i0, file, 128, 34, 2400);
			attr_dev(h10, "class", "svelte-1kwe4x2");
			add_location(h10, file, 128, 20, 2386);
			attr_dev(p0, "class", "lead svelte-1kwe4x2");
			add_location(p0, file, 129, 20, 2458);
			attr_dev(div0, "class", "workshops svelte-1kwe4x2");
			add_location(div0, file, 127, 16, 2342);
			attr_dev(i1, "class", "fas fa-comment-alt svelte-1kwe4x2");
			add_location(i1, file, 134, 35, 2706);
			attr_dev(h11, "class", "svelte-1kwe4x2");
			add_location(h11, file, 134, 16, 2687);
			attr_dev(p1, "class", "lead svelte-1kwe4x2");
			add_location(p1, file, 135, 20, 2766);
			attr_dev(div1, "class", "input svelte-1kwe4x2");
			add_location(div1, file, 133, 16, 2651);
			attr_dev(i2, "class", "fas fa-mug-hot svelte-1kwe4x2");
			add_location(i2, file, 140, 31, 3011);
			attr_dev(h12, "class", "svelte-1kwe4x2");
			add_location(h12, file, 140, 16, 2996);
			attr_dev(p2, "class", "lead svelte-1kwe4x2");
			add_location(p2, file, 141, 20, 3067);
			attr_dev(div2, "class", "mentor svelte-1kwe4x2");
			add_location(div2, file, 139, 16, 2959);
			attr_dev(div3, "class", "grid-container svelte-1kwe4x2");
			add_location(div3, file, 126, 12, 2297);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, h10);
			append_dev(h10, t0);
			append_dev(h10, i0);
			append_dev(div0, t1);
			append_dev(div0, p0);
			append_dev(p0, t2);
			append_dev(div3, t3);
			append_dev(div3, div1);
			append_dev(div1, h11);
			append_dev(h11, t4);
			append_dev(h11, i1);
			append_dev(div1, t5);
			append_dev(div1, p1);
			append_dev(p1, t6);
			append_dev(div3, t7);
			append_dev(div3, div2);
			append_dev(div2, h12);
			append_dev(h12, t8);
			append_dev(h12, i2);
			append_dev(div2, t9);
			append_dev(div2, p2);
			append_dev(p2, t10);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(126:8) {#if threeBoxes === \\\"true\\\"}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let t0;
	let div;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let section_class_value;
	let if_block0 = /*leftAlign*/ ctx[7] && create_if_block_2(ctx);
	let if_block1 = /*buttonBool*/ ctx[2] === "true" && create_if_block_1(ctx);
	let if_block2 = /*threeBoxes*/ ctx[5] === "true" && create_if_block(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = text(/*heading*/ ctx[0]);
			t2 = space();
			p = element("p");
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block0) if_block0.l(section_nodes);
			t0 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, /*heading*/ ctx[0]);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t4 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-1kwe4x2");
			add_location(h1, file, 116, 8, 1989);
			attr_dev(p, "class", "lead svelte-1kwe4x2");
			toggle_class(p, "quoteQuote", /*quote*/ ctx[8]);
			add_location(p, file, 117, 8, 2016);
			attr_dev(div, "class", "wrapper svelte-1kwe4x2");
			add_location(div, file, 115, 4, 1959);
			attr_dev(section, "class", section_class_value = "quote " + /*fullWidth*/ ctx[6] + " svelte-1kwe4x2");
			toggle_class(section, "leftAlign", /*leftAlign*/ ctx[7]);
			add_location(section, file, 111, 0, 1815);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append_dev(section, t0);
			append_dev(section, div);
			append_dev(div, h1);
			append_dev(h1, t1);
			append_dev(div, t2);
			append_dev(div, p);
			p.innerHTML = /*subtext*/ ctx[1];
			append_dev(div, t3);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t4);
			if (if_block2) if_block2.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*leftAlign*/ ctx[7]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*heading*/ 1) set_data_dev(t1, /*heading*/ ctx[0]);
			if (dirty & /*subtext*/ 2) p.innerHTML = /*subtext*/ ctx[1];
			if (dirty & /*quote*/ 256) {
				toggle_class(p, "quoteQuote", /*quote*/ ctx[8]);
			}

			if (/*buttonBool*/ ctx[2] === "true") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*threeBoxes*/ ctx[5] === "true") {
				if (if_block2) ; else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*fullWidth*/ 64 && section_class_value !== (section_class_value = "quote " + /*fullWidth*/ ctx[6] + " svelte-1kwe4x2")) {
				attr_dev(section, "class", section_class_value);
			}

			if (dirty & /*fullWidth, leftAlign*/ 192) {
				toggle_class(section, "leftAlign", /*leftAlign*/ ctx[7]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { heading } = $$props;
	let { subtext } = $$props;
	let { buttonBool } = $$props;
	let { buttonLink } = $$props;
	let { buttonText } = $$props;
	let { threeBoxes } = $$props;
	let { fullWidth = "false" } = $$props;
	let { leftAlign = false } = $$props;
	let { quote = false } = $$props;

	const writable_props = [
		"heading",
		"subtext",
		"buttonBool",
		"buttonLink",
		"buttonText",
		"threeBoxes",
		"fullWidth",
		"leftAlign",
		"quote"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Quote> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Quote", $$slots, []);

	$$self.$$set = $$props => {
		if ("heading" in $$props) $$invalidate(0, heading = $$props.heading);
		if ("subtext" in $$props) $$invalidate(1, subtext = $$props.subtext);
		if ("buttonBool" in $$props) $$invalidate(2, buttonBool = $$props.buttonBool);
		if ("buttonLink" in $$props) $$invalidate(3, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(4, buttonText = $$props.buttonText);
		if ("threeBoxes" in $$props) $$invalidate(5, threeBoxes = $$props.threeBoxes);
		if ("fullWidth" in $$props) $$invalidate(6, fullWidth = $$props.fullWidth);
		if ("leftAlign" in $$props) $$invalidate(7, leftAlign = $$props.leftAlign);
		if ("quote" in $$props) $$invalidate(8, quote = $$props.quote);
	};

	$$self.$capture_state = () => ({
		heading,
		subtext,
		buttonBool,
		buttonLink,
		buttonText,
		threeBoxes,
		fullWidth,
		leftAlign,
		quote
	});

	$$self.$inject_state = $$props => {
		if ("heading" in $$props) $$invalidate(0, heading = $$props.heading);
		if ("subtext" in $$props) $$invalidate(1, subtext = $$props.subtext);
		if ("buttonBool" in $$props) $$invalidate(2, buttonBool = $$props.buttonBool);
		if ("buttonLink" in $$props) $$invalidate(3, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(4, buttonText = $$props.buttonText);
		if ("threeBoxes" in $$props) $$invalidate(5, threeBoxes = $$props.threeBoxes);
		if ("fullWidth" in $$props) $$invalidate(6, fullWidth = $$props.fullWidth);
		if ("leftAlign" in $$props) $$invalidate(7, leftAlign = $$props.leftAlign);
		if ("quote" in $$props) $$invalidate(8, quote = $$props.quote);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		heading,
		subtext,
		buttonBool,
		buttonLink,
		buttonText,
		threeBoxes,
		fullWidth,
		leftAlign,
		quote
	];
}

class Quote extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			heading: 0,
			subtext: 1,
			buttonBool: 2,
			buttonLink: 3,
			buttonText: 4,
			threeBoxes: 5,
			fullWidth: 6,
			leftAlign: 7,
			quote: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Quote",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*heading*/ ctx[0] === undefined && !("heading" in props)) {
			console.warn("<Quote> was created without expected prop 'heading'");
		}

		if (/*subtext*/ ctx[1] === undefined && !("subtext" in props)) {
			console.warn("<Quote> was created without expected prop 'subtext'");
		}

		if (/*buttonBool*/ ctx[2] === undefined && !("buttonBool" in props)) {
			console.warn("<Quote> was created without expected prop 'buttonBool'");
		}

		if (/*buttonLink*/ ctx[3] === undefined && !("buttonLink" in props)) {
			console.warn("<Quote> was created without expected prop 'buttonLink'");
		}

		if (/*buttonText*/ ctx[4] === undefined && !("buttonText" in props)) {
			console.warn("<Quote> was created without expected prop 'buttonText'");
		}

		if (/*threeBoxes*/ ctx[5] === undefined && !("threeBoxes" in props)) {
			console.warn("<Quote> was created without expected prop 'threeBoxes'");
		}
	}

	get heading() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set heading(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get subtext() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subtext(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonBool() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonBool(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonLink() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonLink(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonText() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonText(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get threeBoxes() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set threeBoxes(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fullWidth() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fullWidth(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get leftAlign() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set leftAlign(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get quote() {
		throw new Error("<Quote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set quote(value) {
		throw new Error("<Quote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Hero.svelte generated by Svelte v3.24.1 */

const file$1 = "src/components/Hero.svelte";

// (157:0) {:else}
function create_else_block_1(ctx) {
	let section;
	let div2;
	let div0;
	let t0;
	let t1;
	let div1;
	let h4;
	let t2;
	let t3;
	let h1;
	let t4;
	let p;
	let p_class_value;
	let section_class_value;

	function select_block_type_2(ctx, dirty) {
		if (/*isAux*/ ctx[5] === "isAux") return create_if_block_4;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*buttonBool*/ ctx[13] === "true" && create_if_block_3(ctx);

	const block = {
		c: function create() {
			section = element("section");
			div2 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			h4 = element("h4");
			t2 = text(/*subheader*/ ctx[0]);
			t3 = space();
			h1 = element("h1");
			t4 = space();
			p = element("p");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if_block0.l(div0_nodes);
			t0 = claim_space(div0_nodes);
			if (if_block1) if_block1.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div1_nodes = children(div1);
			h4 = claim_element(div1_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t2 = claim_text(h4_nodes, /*subheader*/ ctx[0]);
			h4_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "left svelte-1v6ixdd");
			add_location(div0, file$1, 159, 2, 3269);
			attr_dev(h4, "class", "sub svelte-1v6ixdd");
			add_location(h4, file$1, 172, 3, 3718);
			attr_dev(h1, "class", "svelte-1v6ixdd");
			add_location(h1, file$1, 173, 3, 3754);
			attr_dev(p, "class", p_class_value = "lead " + /*whiteText*/ ctx[7] + " svelte-1v6ixdd");
			add_location(p, file$1, 174, 3, 3781);
			attr_dev(div1, "class", "right svelte-1v6ixdd");
			set_style(div1, "margin-left", "5vmax");
			add_location(div1, file$1, 171, 2, 3667);
			attr_dev(div2, "class", "grid-container svelte-1v6ixdd");
			add_location(div2, file$1, 158, 1, 3238);
			attr_dev(section, "class", section_class_value = "hero " + /*isAux*/ ctx[5] + " " + /*whiteText*/ ctx[7] + " " + /*extraText*/ ctx[11] + " svelte-1v6ixdd");
			set_style(section, "background", "#fff url('" + /*bgURL*/ ctx[4] + "') left no-repeat");
			set_style(section, "background-position", "65vmin");
			add_location(section, file$1, 157, 0, 3097);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div2);
			append_dev(div2, div0);
			if_block0.m(div0, null);
			append_dev(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, h4);
			append_dev(h4, t2);
			append_dev(div1, t3);
			append_dev(div1, h1);
			h1.innerHTML = /*header*/ ctx[1];
			append_dev(div1, t4);
			append_dev(div1, p);
			p.innerHTML = /*text*/ ctx[2];
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div0, t0);
				}
			}

			if (/*buttonBool*/ ctx[13] === "true") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*subheader*/ 1) set_data_dev(t2, /*subheader*/ ctx[0]);
			if (dirty & /*header*/ 2) h1.innerHTML = /*header*/ ctx[1];			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];
			if (dirty & /*whiteText*/ 128 && p_class_value !== (p_class_value = "lead " + /*whiteText*/ ctx[7] + " svelte-1v6ixdd")) {
				attr_dev(p, "class", p_class_value);
			}

			if (dirty & /*isAux, whiteText, extraText*/ 2208 && section_class_value !== (section_class_value = "hero " + /*isAux*/ ctx[5] + " " + /*whiteText*/ ctx[7] + " " + /*extraText*/ ctx[11] + " svelte-1v6ixdd")) {
				attr_dev(section, "class", section_class_value);
			}

			if (dirty & /*bgURL*/ 16) {
				set_style(section, "background", "#fff url('" + /*bgURL*/ ctx[4] + "') left no-repeat");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(157:0) {:else}",
		ctx
	});

	return block;
}

// (131:0) {#if alternate === 'false'}
function create_if_block$1(ctx) {
	let section;
	let div2;
	let div0;
	let h4;
	let t0;
	let t1;
	let h1;
	let t2;
	let p;
	let p_class_value;
	let t3;
	let t4;
	let div1;
	let section_class_value;
	let if_block0 = /*buttonBool*/ ctx[13] === "true" && create_if_block_2$1(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*isAux*/ ctx[5] === "isAux") return create_if_block_1$1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block1 = current_block_type(ctx);

	const block = {
		c: function create() {
			section = element("section");
			div2 = element("div");
			div0 = element("div");
			h4 = element("h4");
			t0 = text(/*subheader*/ ctx[0]);
			t1 = space();
			h1 = element("h1");
			t2 = space();
			p = element("p");
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			div1 = element("div");
			if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, ref: true, style: true });
			var section_nodes = children(section);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h4 = claim_element(div0_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, /*subheader*/ ctx[0]);
			h4_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			if (if_block0) if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h4, "class", "sub svelte-1v6ixdd");
			add_location(h4, file$1, 134, 3, 2525);
			attr_dev(h1, "class", "svelte-1v6ixdd");
			add_location(h1, file$1, 135, 3, 2561);
			attr_dev(p, "class", p_class_value = "lead " + /*smallerText*/ ctx[8] + " " + /*whiteText*/ ctx[7] + " svelte-1v6ixdd");
			add_location(p, file$1, 136, 3, 2588);
			attr_dev(div0, "class", "left svelte-1v6ixdd");
			add_location(div0, file$1, 133, 2, 2503);
			attr_dev(div1, "class", "right svelte-1v6ixdd");
			add_location(div1, file$1, 145, 2, 2833);
			attr_dev(div2, "class", "grid-container svelte-1v6ixdd");
			add_location(div2, file$1, 132, 1, 2472);
			attr_dev(section, "class", section_class_value = "hero " + /*isAux*/ ctx[5] + " " + /*whiteText*/ ctx[7] + " " + /*extraText*/ ctx[11] + " svelte-1v6ixdd");
			attr_dev(section, "ref", /*approach*/ ctx[10]);
			set_style(section, "background", "#fff url('" + /*bgURL*/ ctx[4] + "') right no-repeat");
			set_style(section, "background-position", "65vmin");
			add_location(section, file$1, 131, 0, 2315);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div2);
			append_dev(div2, div0);
			append_dev(div0, h4);
			append_dev(h4, t0);
			append_dev(div0, t1);
			append_dev(div0, h1);
			h1.innerHTML = /*header*/ ctx[1];
			append_dev(div0, t2);
			append_dev(div0, p);
			p.innerHTML = /*text*/ ctx[2];
			append_dev(div0, t3);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div2, t4);
			append_dev(div2, div1);
			if_block1.m(div1, null);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*subheader*/ 1) set_data_dev(t0, /*subheader*/ ctx[0]);
			if (dirty & /*header*/ 2) h1.innerHTML = /*header*/ ctx[1];			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];
			if (dirty & /*smallerText, whiteText*/ 384 && p_class_value !== (p_class_value = "lead " + /*smallerText*/ ctx[8] + " " + /*whiteText*/ ctx[7] + " svelte-1v6ixdd")) {
				attr_dev(p, "class", p_class_value);
			}

			if (/*buttonBool*/ ctx[13] === "true") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2$1(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div1, null);
				}
			}

			if (dirty & /*isAux, whiteText, extraText*/ 2208 && section_class_value !== (section_class_value = "hero " + /*isAux*/ ctx[5] + " " + /*whiteText*/ ctx[7] + " " + /*extraText*/ ctx[11] + " svelte-1v6ixdd")) {
				attr_dev(section, "class", section_class_value);
			}

			if (dirty & /*approach*/ 1024) {
				attr_dev(section, "ref", /*approach*/ ctx[10]);
			}

			if (dirty & /*bgURL*/ 16) {
				set_style(section, "background", "#fff url('" + /*bgURL*/ ctx[4] + "') right no-repeat");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(131:0) {#if alternate === 'false'}",
		ctx
	});

	return block;
}

// (163:3) {:else}
function create_else_block_2(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				style: true,
				src: true,
				alt: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			if (img.src !== (img_src_value = /*imageURL*/ ctx[3])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1v6ixdd");
			toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			add_location(img, file$1, 163, 3, 3407);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*customImageStyles*/ 4096) {
				attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			}

			if (dirty & /*imageURL*/ 8 && img.src !== (img_src_value = /*imageURL*/ ctx[3])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*smallerImage*/ 512) {
				toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(163:3) {:else}",
		ctx
	});

	return block;
}

// (161:3) {#if isAux === 'isAux'}
function create_if_block_4(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				style: true,
				src: true,
				alt: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			if (img.src !== (img_src_value = /*imageURL*/ ctx[3])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1v6ixdd");
			toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			add_location(img, file$1, 161, 3, 3318);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*customImageStyles*/ 4096) {
				attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			}

			if (dirty & /*imageURL*/ 8 && img.src !== (img_src_value = /*imageURL*/ ctx[3])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*smallerImage*/ 512) {
				toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(161:3) {#if isAux === 'isAux'}",
		ctx
	});

	return block;
}

// (166:3) {#if buttonBool === "true"}
function create_if_block_3(ctx) {
	let p;
	let a;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(/*buttonText*/ ctx[15]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, /*buttonText*/ ctx[15]);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*buttonLink*/ ctx[14]);
			attr_dev(a, "class", "button-primary svelte-1v6ixdd");
			add_location(a, file$1, 167, 12, 3566);
			attr_dev(p, "class", "lead button svelte-1v6ixdd");
			add_location(p, file$1, 166, 8, 3530);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*buttonText*/ 32768) set_data_dev(t, /*buttonText*/ ctx[15]);

			if (dirty & /*buttonLink*/ 16384) {
				attr_dev(a, "href", /*buttonLink*/ ctx[14]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(166:3) {#if buttonBool === \\\"true\\\"}",
		ctx
	});

	return block;
}

// (140:3) {#if buttonBool === "true"}
function create_if_block_2$1(ctx) {
	let p;
	let a;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(/*buttonText*/ ctx[15]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, /*buttonText*/ ctx[15]);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*buttonLink*/ ctx[14]);
			attr_dev(a, "class", "button-primary svelte-1v6ixdd");
			add_location(a, file$1, 141, 12, 2732);
			attr_dev(p, "class", "lead button svelte-1v6ixdd");
			add_location(p, file$1, 140, 8, 2696);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*buttonText*/ 32768) set_data_dev(t, /*buttonText*/ ctx[15]);

			if (dirty & /*buttonLink*/ 16384) {
				attr_dev(a, "href", /*buttonLink*/ ctx[14]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(140:3) {#if buttonBool === \\\"true\\\"}",
		ctx
	});

	return block;
}

// (149:3) {:else}
function create_else_block(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				style: true,
				src: true,
				alt: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			if (img.src !== (img_src_value = /*imageURL*/ ctx[3])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1v6ixdd");
			toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			add_location(img, file$1, 149, 3, 2972);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*customImageStyles*/ 4096) {
				attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			}

			if (dirty & /*imageURL*/ 8 && img.src !== (img_src_value = /*imageURL*/ ctx[3])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*smallerImage*/ 512) {
				toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(149:3) {:else}",
		ctx
	});

	return block;
}

// (147:3) {#if isAux === 'isAux'}
function create_if_block_1$1(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				style: true,
				src: true,
				alt: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			if (img.src !== (img_src_value = /*imageURL*/ ctx[3])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1v6ixdd");
			toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			add_location(img, file$1, 147, 3, 2883);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*customImageStyles*/ 4096) {
				attr_dev(img, "style", /*customImageStyles*/ ctx[12]);
			}

			if (dirty & /*imageURL*/ 8 && img.src !== (img_src_value = /*imageURL*/ ctx[3])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*smallerImage*/ 512) {
				toggle_class(img, "smallerImage", /*smallerImage*/ ctx[9]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(147:3) {#if isAux === 'isAux'}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*alternate*/ ctx[6] === "false") return create_if_block$1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { subheader } = $$props;
	let { header } = $$props;
	let { text } = $$props;
	let { imageURL } = $$props;
	let { bgURL } = $$props;
	let { isAux = "false" } = $$props; //is_auxillary means it's a left/right element but not hero
	let { alternate = "false" } = $$props;
	let { whiteText = "false" } = $$props;
	let { smallerText = "false" } = $$props;
	let { smallerImage = false } = $$props;
	let { approach = "" } = $$props;
	let { extraText = "false" } = $$props;
	let { customImageStyles = "" } = $$props;
	let { buttonBool } = $$props;
	let { buttonLink } = $$props;
	let { buttonText } = $$props;

	const writable_props = [
		"subheader",
		"header",
		"text",
		"imageURL",
		"bgURL",
		"isAux",
		"alternate",
		"whiteText",
		"smallerText",
		"smallerImage",
		"approach",
		"extraText",
		"customImageStyles",
		"buttonBool",
		"buttonLink",
		"buttonText"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Hero> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Hero", $$slots, []);

	$$self.$$set = $$props => {
		if ("subheader" in $$props) $$invalidate(0, subheader = $$props.subheader);
		if ("header" in $$props) $$invalidate(1, header = $$props.header);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("imageURL" in $$props) $$invalidate(3, imageURL = $$props.imageURL);
		if ("bgURL" in $$props) $$invalidate(4, bgURL = $$props.bgURL);
		if ("isAux" in $$props) $$invalidate(5, isAux = $$props.isAux);
		if ("alternate" in $$props) $$invalidate(6, alternate = $$props.alternate);
		if ("whiteText" in $$props) $$invalidate(7, whiteText = $$props.whiteText);
		if ("smallerText" in $$props) $$invalidate(8, smallerText = $$props.smallerText);
		if ("smallerImage" in $$props) $$invalidate(9, smallerImage = $$props.smallerImage);
		if ("approach" in $$props) $$invalidate(10, approach = $$props.approach);
		if ("extraText" in $$props) $$invalidate(11, extraText = $$props.extraText);
		if ("customImageStyles" in $$props) $$invalidate(12, customImageStyles = $$props.customImageStyles);
		if ("buttonBool" in $$props) $$invalidate(13, buttonBool = $$props.buttonBool);
		if ("buttonLink" in $$props) $$invalidate(14, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(15, buttonText = $$props.buttonText);
	};

	$$self.$capture_state = () => ({
		subheader,
		header,
		text,
		imageURL,
		bgURL,
		isAux,
		alternate,
		whiteText,
		smallerText,
		smallerImage,
		approach,
		extraText,
		customImageStyles,
		buttonBool,
		buttonLink,
		buttonText
	});

	$$self.$inject_state = $$props => {
		if ("subheader" in $$props) $$invalidate(0, subheader = $$props.subheader);
		if ("header" in $$props) $$invalidate(1, header = $$props.header);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("imageURL" in $$props) $$invalidate(3, imageURL = $$props.imageURL);
		if ("bgURL" in $$props) $$invalidate(4, bgURL = $$props.bgURL);
		if ("isAux" in $$props) $$invalidate(5, isAux = $$props.isAux);
		if ("alternate" in $$props) $$invalidate(6, alternate = $$props.alternate);
		if ("whiteText" in $$props) $$invalidate(7, whiteText = $$props.whiteText);
		if ("smallerText" in $$props) $$invalidate(8, smallerText = $$props.smallerText);
		if ("smallerImage" in $$props) $$invalidate(9, smallerImage = $$props.smallerImage);
		if ("approach" in $$props) $$invalidate(10, approach = $$props.approach);
		if ("extraText" in $$props) $$invalidate(11, extraText = $$props.extraText);
		if ("customImageStyles" in $$props) $$invalidate(12, customImageStyles = $$props.customImageStyles);
		if ("buttonBool" in $$props) $$invalidate(13, buttonBool = $$props.buttonBool);
		if ("buttonLink" in $$props) $$invalidate(14, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(15, buttonText = $$props.buttonText);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		subheader,
		header,
		text,
		imageURL,
		bgURL,
		isAux,
		alternate,
		whiteText,
		smallerText,
		smallerImage,
		approach,
		extraText,
		customImageStyles,
		buttonBool,
		buttonLink,
		buttonText
	];
}

class Hero extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			subheader: 0,
			header: 1,
			text: 2,
			imageURL: 3,
			bgURL: 4,
			isAux: 5,
			alternate: 6,
			whiteText: 7,
			smallerText: 8,
			smallerImage: 9,
			approach: 10,
			extraText: 11,
			customImageStyles: 12,
			buttonBool: 13,
			buttonLink: 14,
			buttonText: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Hero",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*subheader*/ ctx[0] === undefined && !("subheader" in props)) {
			console.warn("<Hero> was created without expected prop 'subheader'");
		}

		if (/*header*/ ctx[1] === undefined && !("header" in props)) {
			console.warn("<Hero> was created without expected prop 'header'");
		}

		if (/*text*/ ctx[2] === undefined && !("text" in props)) {
			console.warn("<Hero> was created without expected prop 'text'");
		}

		if (/*imageURL*/ ctx[3] === undefined && !("imageURL" in props)) {
			console.warn("<Hero> was created without expected prop 'imageURL'");
		}

		if (/*bgURL*/ ctx[4] === undefined && !("bgURL" in props)) {
			console.warn("<Hero> was created without expected prop 'bgURL'");
		}

		if (/*buttonBool*/ ctx[13] === undefined && !("buttonBool" in props)) {
			console.warn("<Hero> was created without expected prop 'buttonBool'");
		}

		if (/*buttonLink*/ ctx[14] === undefined && !("buttonLink" in props)) {
			console.warn("<Hero> was created without expected prop 'buttonLink'");
		}

		if (/*buttonText*/ ctx[15] === undefined && !("buttonText" in props)) {
			console.warn("<Hero> was created without expected prop 'buttonText'");
		}
	}

	get subheader() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set subheader(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get header() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set header(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imageURL() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageURL(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bgURL() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bgURL(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isAux() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isAux(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alternate() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alternate(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get whiteText() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set whiteText(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get smallerText() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set smallerText(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get smallerImage() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set smallerImage(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get approach() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set approach(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get extraText() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set extraText(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get customImageStyles() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set customImageStyles(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonBool() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonBool(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonLink() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonLink(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonText() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonText(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/MobileHero.svelte generated by Svelte v3.24.1 */

const file$2 = "src/components/MobileHero.svelte";

// (13:8) {#if button}
function create_if_block$2(ctx) {
	let p;
	let a;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(/*buttonText*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, /*buttonText*/ ctx[4]);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*buttonLink*/ ctx[3]);
			attr_dev(a, "class", "button-primary svelte-18ksu22");
			add_location(a, file$2, 14, 6, 328);
			attr_dev(p, "class", "lead button svelte-18ksu22");
			add_location(p, file$2, 13, 4, 298);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*buttonText*/ 16) set_data_dev(t, /*buttonText*/ ctx[4]);

			if (dirty & /*buttonLink*/ 8) {
				attr_dev(a, "href", /*buttonLink*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(13:8) {#if button}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let section;
	let div;
	let h1;
	let t0;
	let p;
	let t1;
	let if_block = /*button*/ ctx[2] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			section = element("section");
			div = element("div");
			h1 = element("h1");
			t0 = space();
			p = element("p");
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-18ksu22");
			add_location(h1, file$2, 10, 8, 207);
			attr_dev(p, "class", "lead svelte-18ksu22");
			add_location(p, file$2, 11, 8, 240);
			attr_dev(div, "class", "wrapper svelte-18ksu22");
			add_location(div, file$2, 9, 4, 177);
			attr_dev(section, "class", "mobile__hero svelte-18ksu22");
			add_location(section, file$2, 8, 0, 142);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div);
			append_dev(div, h1);
			h1.innerHTML = /*heading*/ ctx[0];
			append_dev(div, t0);
			append_dev(div, p);
			p.innerHTML = /*text*/ ctx[1];
			append_dev(div, t1);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*heading*/ 1) h1.innerHTML = /*heading*/ ctx[0];			if (dirty & /*text*/ 2) p.innerHTML = /*text*/ ctx[1];
			if (/*button*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { heading } = $$props;
	let { text } = $$props;
	let { button } = $$props;
	let { buttonLink } = $$props;
	let { buttonText } = $$props;
	const writable_props = ["heading", "text", "button", "buttonLink", "buttonText"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MobileHero> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MobileHero", $$slots, []);

	$$self.$$set = $$props => {
		if ("heading" in $$props) $$invalidate(0, heading = $$props.heading);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("button" in $$props) $$invalidate(2, button = $$props.button);
		if ("buttonLink" in $$props) $$invalidate(3, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(4, buttonText = $$props.buttonText);
	};

	$$self.$capture_state = () => ({
		heading,
		text,
		button,
		buttonLink,
		buttonText
	});

	$$self.$inject_state = $$props => {
		if ("heading" in $$props) $$invalidate(0, heading = $$props.heading);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("button" in $$props) $$invalidate(2, button = $$props.button);
		if ("buttonLink" in $$props) $$invalidate(3, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(4, buttonText = $$props.buttonText);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [heading, text, button, buttonLink, buttonText];
}

class MobileHero extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			heading: 0,
			text: 1,
			button: 2,
			buttonLink: 3,
			buttonText: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MobileHero",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*heading*/ ctx[0] === undefined && !("heading" in props)) {
			console.warn("<MobileHero> was created without expected prop 'heading'");
		}

		if (/*text*/ ctx[1] === undefined && !("text" in props)) {
			console.warn("<MobileHero> was created without expected prop 'text'");
		}

		if (/*button*/ ctx[2] === undefined && !("button" in props)) {
			console.warn("<MobileHero> was created without expected prop 'button'");
		}

		if (/*buttonLink*/ ctx[3] === undefined && !("buttonLink" in props)) {
			console.warn("<MobileHero> was created without expected prop 'buttonLink'");
		}

		if (/*buttonText*/ ctx[4] === undefined && !("buttonText" in props)) {
			console.warn("<MobileHero> was created without expected prop 'buttonText'");
		}
	}

	get heading() {
		throw new Error("<MobileHero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set heading(value) {
		throw new Error("<MobileHero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<MobileHero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<MobileHero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get button() {
		throw new Error("<MobileHero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set button(value) {
		throw new Error("<MobileHero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonLink() {
		throw new Error("<MobileHero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonLink(value) {
		throw new Error("<MobileHero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonText() {
		throw new Error("<MobileHero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonText(value) {
		throw new Error("<MobileHero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/MobileImage.svelte generated by Svelte v3.24.1 */

const file$3 = "src/components/MobileImage.svelte";

function create_fragment$3(ctx) {
	let section;
	let div;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			section = element("section");
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, style: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			img = claim_element(div_nodes, "IMG", {
				src: true,
				style: true,
				alt: true,
				class: true
			});

			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*imgUrl*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "style", /*customStyles*/ ctx[2]);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-88a7s0");
			add_location(img, file$3, 26, 8, 543);
			attr_dev(div, "class", "wrapper");
			add_location(div, file$3, 25, 4, 513);
			attr_dev(section, "class", "mobile__image svelte-88a7s0");
			set_style(section, "background", "#fff url('" + /*bgUrl*/ ctx[1] + "') right no-repeat");
			set_style(section, "background-position", "20vmin top");
			add_location(section, file$3, 24, 0, 387);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div);
			append_dev(div, img);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*imgUrl*/ 1 && img.src !== (img_src_value = /*imgUrl*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*customStyles*/ 4) {
				attr_dev(img, "style", /*customStyles*/ ctx[2]);
			}

			if (dirty & /*bgUrl*/ 2) {
				set_style(section, "background", "#fff url('" + /*bgUrl*/ ctx[1] + "') right no-repeat");
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { imgUrl } = $$props;
	let { bgUrl } = $$props;
	let { customStyles = "" } = $$props;
	const writable_props = ["imgUrl", "bgUrl", "customStyles"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MobileImage> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MobileImage", $$slots, []);

	$$self.$$set = $$props => {
		if ("imgUrl" in $$props) $$invalidate(0, imgUrl = $$props.imgUrl);
		if ("bgUrl" in $$props) $$invalidate(1, bgUrl = $$props.bgUrl);
		if ("customStyles" in $$props) $$invalidate(2, customStyles = $$props.customStyles);
	};

	$$self.$capture_state = () => ({ imgUrl, bgUrl, customStyles });

	$$self.$inject_state = $$props => {
		if ("imgUrl" in $$props) $$invalidate(0, imgUrl = $$props.imgUrl);
		if ("bgUrl" in $$props) $$invalidate(1, bgUrl = $$props.bgUrl);
		if ("customStyles" in $$props) $$invalidate(2, customStyles = $$props.customStyles);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [imgUrl, bgUrl, customStyles];
}

class MobileImage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { imgUrl: 0, bgUrl: 1, customStyles: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MobileImage",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*imgUrl*/ ctx[0] === undefined && !("imgUrl" in props)) {
			console.warn("<MobileImage> was created without expected prop 'imgUrl'");
		}

		if (/*bgUrl*/ ctx[1] === undefined && !("bgUrl" in props)) {
			console.warn("<MobileImage> was created without expected prop 'bgUrl'");
		}
	}

	get imgUrl() {
		throw new Error("<MobileImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imgUrl(value) {
		throw new Error("<MobileImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bgUrl() {
		throw new Error("<MobileImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bgUrl(value) {
		throw new Error("<MobileImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get customStyles() {
		throw new Error("<MobileImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set customStyles(value) {
		throw new Error("<MobileImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/MobileQuote.svelte generated by Svelte v3.24.1 */

const file$4 = "src/components/MobileQuote.svelte";

// (12:2) {#if showLogo}
function create_if_block_1$2(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/logos/varry_wave_gradient.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-1sjnr5n");
			add_location(img, file$4, 12, 2, 229);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(12:2) {#if showLogo}",
		ctx
	});

	return block;
}

// (19:4) {#if button}
function create_if_block$3(ctx) {
	let p;
	let a;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(/*buttonText*/ ctx[5]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, /*buttonText*/ ctx[5]);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*buttonLink*/ ctx[4]);
			attr_dev(a, "class", "button-primary svelte-1sjnr5n");
			add_location(a, file$4, 20, 6, 429);
			attr_dev(p, "class", "lead button svelte-1sjnr5n");
			add_location(p, file$4, 19, 4, 399);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*buttonText*/ 32) set_data_dev(t, /*buttonText*/ ctx[5]);

			if (dirty & /*buttonLink*/ 16) {
				attr_dev(a, "href", /*buttonLink*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(19:4) {#if button}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let section;
	let t0;
	let div;
	let h1;
	let t1;
	let p;
	let t2;
	let if_block0 = /*showLogo*/ ctx[0] && create_if_block_1$2(ctx);
	let if_block1 = /*button*/ ctx[3] && create_if_block$3(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = space();
			p = element("p");
			t2 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block0) if_block0.l(section_nodes);
			t0 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-1sjnr5n");
			add_location(h1, file$4, 15, 4, 315);
			attr_dev(p, "class", "lead svelte-1sjnr5n");
			add_location(p, file$4, 16, 4, 344);
			attr_dev(div, "class", "wrapper svelte-1sjnr5n");
			add_location(div, file$4, 14, 2, 289);
			attr_dev(section, "class", "mobile__hero svelte-1sjnr5n");
			add_location(section, file$4, 10, 0, 179);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append_dev(section, t0);
			append_dev(section, div);
			append_dev(div, h1);
			h1.innerHTML = /*heading*/ ctx[1];
			append_dev(div, t1);
			append_dev(div, p);
			p.innerHTML = /*text*/ ctx[2];
			append_dev(div, t2);
			if (if_block1) if_block1.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*showLogo*/ ctx[0]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_1$2(ctx);
					if_block0.c();
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*heading*/ 2) h1.innerHTML = /*heading*/ ctx[1];			if (dirty & /*text*/ 4) p.innerHTML = /*text*/ ctx[2];
			if (/*button*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$3(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { showLogo } = $$props;
	let { heading } = $$props;
	let { text } = $$props;
	let { button } = $$props;
	let { buttonLink } = $$props;
	let { buttonText } = $$props;
	let { leftAlign } = $$props;

	const writable_props = [
		"showLogo",
		"heading",
		"text",
		"button",
		"buttonLink",
		"buttonText",
		"leftAlign"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MobileQuote> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MobileQuote", $$slots, []);

	$$self.$$set = $$props => {
		if ("showLogo" in $$props) $$invalidate(0, showLogo = $$props.showLogo);
		if ("heading" in $$props) $$invalidate(1, heading = $$props.heading);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("button" in $$props) $$invalidate(3, button = $$props.button);
		if ("buttonLink" in $$props) $$invalidate(4, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(5, buttonText = $$props.buttonText);
		if ("leftAlign" in $$props) $$invalidate(6, leftAlign = $$props.leftAlign);
	};

	$$self.$capture_state = () => ({
		showLogo,
		heading,
		text,
		button,
		buttonLink,
		buttonText,
		leftAlign
	});

	$$self.$inject_state = $$props => {
		if ("showLogo" in $$props) $$invalidate(0, showLogo = $$props.showLogo);
		if ("heading" in $$props) $$invalidate(1, heading = $$props.heading);
		if ("text" in $$props) $$invalidate(2, text = $$props.text);
		if ("button" in $$props) $$invalidate(3, button = $$props.button);
		if ("buttonLink" in $$props) $$invalidate(4, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(5, buttonText = $$props.buttonText);
		if ("leftAlign" in $$props) $$invalidate(6, leftAlign = $$props.leftAlign);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [showLogo, heading, text, button, buttonLink, buttonText, leftAlign];
}

class MobileQuote extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			showLogo: 0,
			heading: 1,
			text: 2,
			button: 3,
			buttonLink: 4,
			buttonText: 5,
			leftAlign: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MobileQuote",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*showLogo*/ ctx[0] === undefined && !("showLogo" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'showLogo'");
		}

		if (/*heading*/ ctx[1] === undefined && !("heading" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'heading'");
		}

		if (/*text*/ ctx[2] === undefined && !("text" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'text'");
		}

		if (/*button*/ ctx[3] === undefined && !("button" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'button'");
		}

		if (/*buttonLink*/ ctx[4] === undefined && !("buttonLink" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'buttonLink'");
		}

		if (/*buttonText*/ ctx[5] === undefined && !("buttonText" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'buttonText'");
		}

		if (/*leftAlign*/ ctx[6] === undefined && !("leftAlign" in props)) {
			console.warn("<MobileQuote> was created without expected prop 'leftAlign'");
		}
	}

	get showLogo() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showLogo(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get heading() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set heading(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get button() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set button(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonLink() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonLink(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonText() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonText(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get leftAlign() {
		throw new Error("<MobileQuote>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set leftAlign(value) {
		throw new Error("<MobileQuote>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/MobileSubFooter.svelte generated by Svelte v3.24.1 */

const file$5 = "src/components/MobileSubFooter.svelte";

// (14:4) {#if button}
function create_if_block$4(ctx) {
	let p;
	let a;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			a = element("a");
			t = text(/*buttonText*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			a = claim_element(p_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, /*buttonText*/ ctx[4]);
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*buttonLink*/ ctx[3]);
			attr_dev(a, "class", "button-primary svelte-by2tqn");
			add_location(a, file$5, 15, 6, 305);
			attr_dev(p, "class", "lead button svelte-by2tqn");
			add_location(p, file$5, 14, 4, 275);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*buttonText*/ 16) set_data_dev(t, /*buttonText*/ ctx[4]);

			if (dirty & /*buttonLink*/ 8) {
				attr_dev(a, "href", /*buttonLink*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(14:4) {#if button}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let section;
	let div;
	let h1;
	let t0;
	let p;
	let t1;
	let if_block = /*button*/ ctx[2] && create_if_block$4(ctx);

	const block = {
		c: function create() {
			section = element("section");
			div = element("div");
			h1 = element("h1");
			t0 = space();
			p = element("p");
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-by2tqn");
			add_location(h1, file$5, 10, 4, 191);
			attr_dev(p, "class", "lead svelte-by2tqn");
			add_location(p, file$5, 11, 4, 220);
			attr_dev(div, "class", "wrapper svelte-by2tqn");
			add_location(div, file$5, 9, 2, 165);
			attr_dev(section, "class", "mobile__hero svelte-by2tqn");
			add_location(section, file$5, 8, 0, 132);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div);
			append_dev(div, h1);
			h1.innerHTML = /*heading*/ ctx[0];
			append_dev(div, t0);
			append_dev(div, p);
			p.innerHTML = /*text*/ ctx[1];
			append_dev(div, t1);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*heading*/ 1) h1.innerHTML = /*heading*/ ctx[0];			if (dirty & /*text*/ 2) p.innerHTML = /*text*/ ctx[1];
			if (/*button*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { heading } = $$props;
	let { text } = $$props;
	let { button } = $$props;
	let { buttonLink } = $$props;
	let { buttonText } = $$props;
	const writable_props = ["heading", "text", "button", "buttonLink", "buttonText"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MobileSubFooter> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MobileSubFooter", $$slots, []);

	$$self.$$set = $$props => {
		if ("heading" in $$props) $$invalidate(0, heading = $$props.heading);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("button" in $$props) $$invalidate(2, button = $$props.button);
		if ("buttonLink" in $$props) $$invalidate(3, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(4, buttonText = $$props.buttonText);
	};

	$$self.$capture_state = () => ({
		heading,
		text,
		button,
		buttonLink,
		buttonText
	});

	$$self.$inject_state = $$props => {
		if ("heading" in $$props) $$invalidate(0, heading = $$props.heading);
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("button" in $$props) $$invalidate(2, button = $$props.button);
		if ("buttonLink" in $$props) $$invalidate(3, buttonLink = $$props.buttonLink);
		if ("buttonText" in $$props) $$invalidate(4, buttonText = $$props.buttonText);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [heading, text, button, buttonLink, buttonText];
}

class MobileSubFooter extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			heading: 0,
			text: 1,
			button: 2,
			buttonLink: 3,
			buttonText: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MobileSubFooter",
			options,
			id: create_fragment$5.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*heading*/ ctx[0] === undefined && !("heading" in props)) {
			console.warn("<MobileSubFooter> was created without expected prop 'heading'");
		}

		if (/*text*/ ctx[1] === undefined && !("text" in props)) {
			console.warn("<MobileSubFooter> was created without expected prop 'text'");
		}

		if (/*button*/ ctx[2] === undefined && !("button" in props)) {
			console.warn("<MobileSubFooter> was created without expected prop 'button'");
		}

		if (/*buttonLink*/ ctx[3] === undefined && !("buttonLink" in props)) {
			console.warn("<MobileSubFooter> was created without expected prop 'buttonLink'");
		}

		if (/*buttonText*/ ctx[4] === undefined && !("buttonText" in props)) {
			console.warn("<MobileSubFooter> was created without expected prop 'buttonText'");
		}
	}

	get heading() {
		throw new Error("<MobileSubFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set heading(value) {
		throw new Error("<MobileSubFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<MobileSubFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<MobileSubFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get button() {
		throw new Error("<MobileSubFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set button(value) {
		throw new Error("<MobileSubFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonLink() {
		throw new Error("<MobileSubFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonLink(value) {
		throw new Error("<MobileSubFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get buttonText() {
		throw new Error("<MobileSubFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set buttonText(value) {
		throw new Error("<MobileSubFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Hero as H, MobileHero as M, Quote as Q, MobileImage as a, MobileQuote as b, MobileSubFooter as c };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
